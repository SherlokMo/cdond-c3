version: 2.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflowId:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<<parameters.workflowId>>
            aws s3 rm s3://udapeople-<<parameters.workflowId>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<<parameters.workflowId>>
jobs:
  build-frontend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: build frontend
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          key: frontend-modules
          paths: 
            - frontend/node_modules

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run: 
          name: build backend
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          key: backend-modules
          paths: 
            - backend/node_modules

  test-frontend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-modules
      - run: 
          name: unit testing frontend
          command: |
            cd frontend
            npm install
            npm test 

  test-backend: 
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-modules
      - run: 
          name: unit testing backend
          command: |
            cd backend
            npm install
            npm test
  
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - frontend-modules
      - run:
          name: scan frontend
          command: |
            cd frontend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
  
  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-modules
      - run: 
          name: scan backend
          command: |
            cd backend
            npm install
            npm audit fix --audit-level=critical --force
            npm audit fix --audit-level=critical --force
            npm audit --audit-level=critical
    
  deploy-infrastructure: 
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: 
          name: installing dependencies (tar, gzip)
          command: yum install -y tar gzip
      - run: 
          name: build backend infrastructure
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - run:
          name: build frontend infrastructure
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      
      - run:
          name: Add the EC2 instance IP to the Ansible inventory
          command: |
            aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters "Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --output text >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      - destroy-environment

  configure-infrastructure: 
    docker:
      - image: python:3.7-alpine3.11

    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d2:b1:44:69:da:57:0f:7b:b1:b7:8d:08:65:78:f3:99"]
      - run:
          name: Setup dependencies
          command: apk add --upgrade ansible bash openssh-client
      - run:
          name: Install AWS-CLI
          command: pip3 install awscli
      - attach_workspace:
          at: ~/
      - run:
          name: Run Playbook
          command: |
            cd .circleci/ansible
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment

  run-migrations:
    docker:
      - image: sleavely/node-awscli:14.x

    steps:
      - checkout
      - restore_cache:
          keys:
            - backend-modules
      - run: 
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run build
            npm run migrations >> migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kdb
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
            then
              curl https://kvdb.io/RYY44FDUScfroiNySyENq7/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
            
      - destroy-environment

  deploy-frontend:
    docker:
      - image: sleavely/node-awscli:14.x
    steps:
      - checkout
      - run: 
          name: Get Url for backend
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --filters 'Name=tag:Name,Values=backend-${CIRCLE_WORKFLOW_ID:0:7}' \
            --output text)
            echo "API_URL=http://${BACKEND_IP}:3030" >> frontend/.env
            cat frontend/.env
      - restore_cache:
          keys:
            - frontend-modules
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment

  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["d2:b1:44:69:da:57:0f:7b:b1:b7:8d:08:65:78:f3:99"]
      - run:
          name: Setup dependencies
          command: apk add --upgrade ansible bash openssh-client curl nodejs npm
      - run:
          name: Install AWS-CLI
          command: pip3 install awscli
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys:
            - backend-modules
      - run: 
         name: Deploy backend
         command: |
            cd backend
            npm i
            npm run build
            cd ..
            # Zip the directory
            tar -C backend -czvf artifact.tar.gz .
            cp artifact.tar.gz .circleci/ansible/roles/deploy/files
            cd .circleci/ansible
            echo "Contents  of the inventory.txt file is -------"
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
workflows:
  default:  
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires:
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - deploy-infrastructure: 
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend: 
          requires: [run-migrations]
      - deploy-backend:
          requires:
            - run-migrations